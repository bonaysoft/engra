// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/bonaysoft/engra/pkg/dal/model"
)

func newRootsAffixes(db *gorm.DB, opts ...gen.DOOption) rootsAffixes {
	_rootsAffixes := rootsAffixes{}

	_rootsAffixes.rootsAffixesDo.UseDB(db, opts...)
	_rootsAffixes.rootsAffixesDo.UseModel(&model.RootsAffixes{})

	tableName := _rootsAffixes.rootsAffixesDo.TableName()
	_rootsAffixes.ALL = field.NewAsterisk(tableName)
	_rootsAffixes.Id = field.NewInt(tableName, "id")
	_rootsAffixes.Name = field.NewString(tableName, "name")
	_rootsAffixes.Meaning = field.NewString(tableName, "meaning")

	_rootsAffixes.fillFieldMap()

	return _rootsAffixes
}

type rootsAffixes struct {
	rootsAffixesDo

	ALL     field.Asterisk
	Id      field.Int
	Name    field.String
	Meaning field.String

	fieldMap map[string]field.Expr
}

func (r rootsAffixes) Table(newTableName string) *rootsAffixes {
	r.rootsAffixesDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r rootsAffixes) As(alias string) *rootsAffixes {
	r.rootsAffixesDo.DO = *(r.rootsAffixesDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *rootsAffixes) updateTableName(table string) *rootsAffixes {
	r.ALL = field.NewAsterisk(table)
	r.Id = field.NewInt(table, "id")
	r.Name = field.NewString(table, "name")
	r.Meaning = field.NewString(table, "meaning")

	r.fillFieldMap()

	return r
}

func (r *rootsAffixes) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *rootsAffixes) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 3)
	r.fieldMap["id"] = r.Id
	r.fieldMap["name"] = r.Name
	r.fieldMap["meaning"] = r.Meaning
}

func (r rootsAffixes) clone(db *gorm.DB) rootsAffixes {
	r.rootsAffixesDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r rootsAffixes) replaceDB(db *gorm.DB) rootsAffixes {
	r.rootsAffixesDo.ReplaceDB(db)
	return r
}

type rootsAffixesDo struct{ gen.DO }

type IRootsAffixesDo interface {
	gen.SubQuery
	Debug() IRootsAffixesDo
	WithContext(ctx context.Context) IRootsAffixesDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRootsAffixesDo
	WriteDB() IRootsAffixesDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRootsAffixesDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRootsAffixesDo
	Not(conds ...gen.Condition) IRootsAffixesDo
	Or(conds ...gen.Condition) IRootsAffixesDo
	Select(conds ...field.Expr) IRootsAffixesDo
	Where(conds ...gen.Condition) IRootsAffixesDo
	Order(conds ...field.Expr) IRootsAffixesDo
	Distinct(cols ...field.Expr) IRootsAffixesDo
	Omit(cols ...field.Expr) IRootsAffixesDo
	Join(table schema.Tabler, on ...field.Expr) IRootsAffixesDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRootsAffixesDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRootsAffixesDo
	Group(cols ...field.Expr) IRootsAffixesDo
	Having(conds ...gen.Condition) IRootsAffixesDo
	Limit(limit int) IRootsAffixesDo
	Offset(offset int) IRootsAffixesDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRootsAffixesDo
	Unscoped() IRootsAffixesDo
	Create(values ...*model.RootsAffixes) error
	CreateInBatches(values []*model.RootsAffixes, batchSize int) error
	Save(values ...*model.RootsAffixes) error
	First() (*model.RootsAffixes, error)
	Take() (*model.RootsAffixes, error)
	Last() (*model.RootsAffixes, error)
	Find() ([]*model.RootsAffixes, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RootsAffixes, err error)
	FindInBatches(result *[]*model.RootsAffixes, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.RootsAffixes) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRootsAffixesDo
	Assign(attrs ...field.AssignExpr) IRootsAffixesDo
	Joins(fields ...field.RelationField) IRootsAffixesDo
	Preload(fields ...field.RelationField) IRootsAffixesDo
	FirstOrInit() (*model.RootsAffixes, error)
	FirstOrCreate() (*model.RootsAffixes, error)
	FindByPage(offset int, limit int) (result []*model.RootsAffixes, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRootsAffixesDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r rootsAffixesDo) Debug() IRootsAffixesDo {
	return r.withDO(r.DO.Debug())
}

func (r rootsAffixesDo) WithContext(ctx context.Context) IRootsAffixesDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r rootsAffixesDo) ReadDB() IRootsAffixesDo {
	return r.Clauses(dbresolver.Read)
}

func (r rootsAffixesDo) WriteDB() IRootsAffixesDo {
	return r.Clauses(dbresolver.Write)
}

func (r rootsAffixesDo) Session(config *gorm.Session) IRootsAffixesDo {
	return r.withDO(r.DO.Session(config))
}

func (r rootsAffixesDo) Clauses(conds ...clause.Expression) IRootsAffixesDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r rootsAffixesDo) Returning(value interface{}, columns ...string) IRootsAffixesDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r rootsAffixesDo) Not(conds ...gen.Condition) IRootsAffixesDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r rootsAffixesDo) Or(conds ...gen.Condition) IRootsAffixesDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r rootsAffixesDo) Select(conds ...field.Expr) IRootsAffixesDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r rootsAffixesDo) Where(conds ...gen.Condition) IRootsAffixesDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r rootsAffixesDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IRootsAffixesDo {
	return r.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (r rootsAffixesDo) Order(conds ...field.Expr) IRootsAffixesDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r rootsAffixesDo) Distinct(cols ...field.Expr) IRootsAffixesDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r rootsAffixesDo) Omit(cols ...field.Expr) IRootsAffixesDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r rootsAffixesDo) Join(table schema.Tabler, on ...field.Expr) IRootsAffixesDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r rootsAffixesDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRootsAffixesDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r rootsAffixesDo) RightJoin(table schema.Tabler, on ...field.Expr) IRootsAffixesDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r rootsAffixesDo) Group(cols ...field.Expr) IRootsAffixesDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r rootsAffixesDo) Having(conds ...gen.Condition) IRootsAffixesDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r rootsAffixesDo) Limit(limit int) IRootsAffixesDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r rootsAffixesDo) Offset(offset int) IRootsAffixesDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r rootsAffixesDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRootsAffixesDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r rootsAffixesDo) Unscoped() IRootsAffixesDo {
	return r.withDO(r.DO.Unscoped())
}

func (r rootsAffixesDo) Create(values ...*model.RootsAffixes) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r rootsAffixesDo) CreateInBatches(values []*model.RootsAffixes, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r rootsAffixesDo) Save(values ...*model.RootsAffixes) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r rootsAffixesDo) First() (*model.RootsAffixes, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.RootsAffixes), nil
	}
}

func (r rootsAffixesDo) Take() (*model.RootsAffixes, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.RootsAffixes), nil
	}
}

func (r rootsAffixesDo) Last() (*model.RootsAffixes, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.RootsAffixes), nil
	}
}

func (r rootsAffixesDo) Find() ([]*model.RootsAffixes, error) {
	result, err := r.DO.Find()
	return result.([]*model.RootsAffixes), err
}

func (r rootsAffixesDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RootsAffixes, err error) {
	buf := make([]*model.RootsAffixes, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r rootsAffixesDo) FindInBatches(result *[]*model.RootsAffixes, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r rootsAffixesDo) Attrs(attrs ...field.AssignExpr) IRootsAffixesDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r rootsAffixesDo) Assign(attrs ...field.AssignExpr) IRootsAffixesDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r rootsAffixesDo) Joins(fields ...field.RelationField) IRootsAffixesDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r rootsAffixesDo) Preload(fields ...field.RelationField) IRootsAffixesDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r rootsAffixesDo) FirstOrInit() (*model.RootsAffixes, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.RootsAffixes), nil
	}
}

func (r rootsAffixesDo) FirstOrCreate() (*model.RootsAffixes, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.RootsAffixes), nil
	}
}

func (r rootsAffixesDo) FindByPage(offset int, limit int) (result []*model.RootsAffixes, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r rootsAffixesDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r rootsAffixesDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r rootsAffixesDo) Delete(models ...*model.RootsAffixes) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *rootsAffixesDo) withDO(do gen.Dao) *rootsAffixesDo {
	r.DO = *do.(*gen.DO)
	return r
}
