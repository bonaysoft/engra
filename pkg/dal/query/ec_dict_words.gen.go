// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/bonaysoft/engra/pkg/dal/model"
)

func newEcDictWord(db *gorm.DB, opts ...gen.DOOption) ecDictWord {
	_ecDictWord := ecDictWord{}

	_ecDictWord.ecDictWordDo.UseDB(db, opts...)
	_ecDictWord.ecDictWordDo.UseModel(&model.EcDictWord{})

	tableName := _ecDictWord.ecDictWordDo.TableName()
	_ecDictWord.ALL = field.NewAsterisk(tableName)
	_ecDictWord.Word = field.NewString(tableName, "word")
	_ecDictWord.Phonetic = field.NewString(tableName, "phonetic")
	_ecDictWord.Definition = field.NewString(tableName, "definition")
	_ecDictWord.Translation = field.NewString(tableName, "translation")
	_ecDictWord.Tag = field.NewString(tableName, "tag")
	_ecDictWord.Exchange = field.NewString(tableName, "exchange")

	_ecDictWord.fillFieldMap()

	return _ecDictWord
}

type ecDictWord struct {
	ecDictWordDo

	ALL         field.Asterisk
	Word        field.String
	Phonetic    field.String
	Definition  field.String
	Translation field.String
	Tag         field.String
	Exchange    field.String

	fieldMap map[string]field.Expr
}

func (e ecDictWord) Table(newTableName string) *ecDictWord {
	e.ecDictWordDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e ecDictWord) As(alias string) *ecDictWord {
	e.ecDictWordDo.DO = *(e.ecDictWordDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *ecDictWord) updateTableName(table string) *ecDictWord {
	e.ALL = field.NewAsterisk(table)
	e.Word = field.NewString(table, "word")
	e.Phonetic = field.NewString(table, "phonetic")
	e.Definition = field.NewString(table, "definition")
	e.Translation = field.NewString(table, "translation")
	e.Tag = field.NewString(table, "tag")
	e.Exchange = field.NewString(table, "exchange")

	e.fillFieldMap()

	return e
}

func (e *ecDictWord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *ecDictWord) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 6)
	e.fieldMap["word"] = e.Word
	e.fieldMap["phonetic"] = e.Phonetic
	e.fieldMap["definition"] = e.Definition
	e.fieldMap["translation"] = e.Translation
	e.fieldMap["tag"] = e.Tag
	e.fieldMap["exchange"] = e.Exchange
}

func (e ecDictWord) clone(db *gorm.DB) ecDictWord {
	e.ecDictWordDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e ecDictWord) replaceDB(db *gorm.DB) ecDictWord {
	e.ecDictWordDo.ReplaceDB(db)
	return e
}

type ecDictWordDo struct{ gen.DO }

type IEcDictWordDo interface {
	gen.SubQuery
	Debug() IEcDictWordDo
	WithContext(ctx context.Context) IEcDictWordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEcDictWordDo
	WriteDB() IEcDictWordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEcDictWordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEcDictWordDo
	Not(conds ...gen.Condition) IEcDictWordDo
	Or(conds ...gen.Condition) IEcDictWordDo
	Select(conds ...field.Expr) IEcDictWordDo
	Where(conds ...gen.Condition) IEcDictWordDo
	Order(conds ...field.Expr) IEcDictWordDo
	Distinct(cols ...field.Expr) IEcDictWordDo
	Omit(cols ...field.Expr) IEcDictWordDo
	Join(table schema.Tabler, on ...field.Expr) IEcDictWordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEcDictWordDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEcDictWordDo
	Group(cols ...field.Expr) IEcDictWordDo
	Having(conds ...gen.Condition) IEcDictWordDo
	Limit(limit int) IEcDictWordDo
	Offset(offset int) IEcDictWordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEcDictWordDo
	Unscoped() IEcDictWordDo
	Create(values ...*model.EcDictWord) error
	CreateInBatches(values []*model.EcDictWord, batchSize int) error
	Save(values ...*model.EcDictWord) error
	First() (*model.EcDictWord, error)
	Take() (*model.EcDictWord, error)
	Last() (*model.EcDictWord, error)
	Find() ([]*model.EcDictWord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EcDictWord, err error)
	FindInBatches(result *[]*model.EcDictWord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.EcDictWord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEcDictWordDo
	Assign(attrs ...field.AssignExpr) IEcDictWordDo
	Joins(fields ...field.RelationField) IEcDictWordDo
	Preload(fields ...field.RelationField) IEcDictWordDo
	FirstOrInit() (*model.EcDictWord, error)
	FirstOrCreate() (*model.EcDictWord, error)
	FindByPage(offset int, limit int) (result []*model.EcDictWord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEcDictWordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e ecDictWordDo) Debug() IEcDictWordDo {
	return e.withDO(e.DO.Debug())
}

func (e ecDictWordDo) WithContext(ctx context.Context) IEcDictWordDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e ecDictWordDo) ReadDB() IEcDictWordDo {
	return e.Clauses(dbresolver.Read)
}

func (e ecDictWordDo) WriteDB() IEcDictWordDo {
	return e.Clauses(dbresolver.Write)
}

func (e ecDictWordDo) Session(config *gorm.Session) IEcDictWordDo {
	return e.withDO(e.DO.Session(config))
}

func (e ecDictWordDo) Clauses(conds ...clause.Expression) IEcDictWordDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e ecDictWordDo) Returning(value interface{}, columns ...string) IEcDictWordDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e ecDictWordDo) Not(conds ...gen.Condition) IEcDictWordDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e ecDictWordDo) Or(conds ...gen.Condition) IEcDictWordDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e ecDictWordDo) Select(conds ...field.Expr) IEcDictWordDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e ecDictWordDo) Where(conds ...gen.Condition) IEcDictWordDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e ecDictWordDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IEcDictWordDo {
	return e.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (e ecDictWordDo) Order(conds ...field.Expr) IEcDictWordDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e ecDictWordDo) Distinct(cols ...field.Expr) IEcDictWordDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e ecDictWordDo) Omit(cols ...field.Expr) IEcDictWordDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e ecDictWordDo) Join(table schema.Tabler, on ...field.Expr) IEcDictWordDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e ecDictWordDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEcDictWordDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e ecDictWordDo) RightJoin(table schema.Tabler, on ...field.Expr) IEcDictWordDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e ecDictWordDo) Group(cols ...field.Expr) IEcDictWordDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e ecDictWordDo) Having(conds ...gen.Condition) IEcDictWordDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e ecDictWordDo) Limit(limit int) IEcDictWordDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e ecDictWordDo) Offset(offset int) IEcDictWordDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e ecDictWordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEcDictWordDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e ecDictWordDo) Unscoped() IEcDictWordDo {
	return e.withDO(e.DO.Unscoped())
}

func (e ecDictWordDo) Create(values ...*model.EcDictWord) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e ecDictWordDo) CreateInBatches(values []*model.EcDictWord, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e ecDictWordDo) Save(values ...*model.EcDictWord) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e ecDictWordDo) First() (*model.EcDictWord, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EcDictWord), nil
	}
}

func (e ecDictWordDo) Take() (*model.EcDictWord, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EcDictWord), nil
	}
}

func (e ecDictWordDo) Last() (*model.EcDictWord, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EcDictWord), nil
	}
}

func (e ecDictWordDo) Find() ([]*model.EcDictWord, error) {
	result, err := e.DO.Find()
	return result.([]*model.EcDictWord), err
}

func (e ecDictWordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EcDictWord, err error) {
	buf := make([]*model.EcDictWord, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e ecDictWordDo) FindInBatches(result *[]*model.EcDictWord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e ecDictWordDo) Attrs(attrs ...field.AssignExpr) IEcDictWordDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e ecDictWordDo) Assign(attrs ...field.AssignExpr) IEcDictWordDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e ecDictWordDo) Joins(fields ...field.RelationField) IEcDictWordDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e ecDictWordDo) Preload(fields ...field.RelationField) IEcDictWordDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e ecDictWordDo) FirstOrInit() (*model.EcDictWord, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EcDictWord), nil
	}
}

func (e ecDictWordDo) FirstOrCreate() (*model.EcDictWord, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EcDictWord), nil
	}
}

func (e ecDictWordDo) FindByPage(offset int, limit int) (result []*model.EcDictWord, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e ecDictWordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e ecDictWordDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e ecDictWordDo) Delete(models ...*model.EcDictWord) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *ecDictWordDo) withDO(do gen.Dao) *ecDictWordDo {
	e.DO = *do.(*gen.DO)
	return e
}
