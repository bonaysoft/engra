// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/bonaysoft/engra/pkg/dal/model"
)

func newVocabulary(db *gorm.DB, opts ...gen.DOOption) vocabulary {
	_vocabulary := vocabulary{}

	_vocabulary.vocabularyDo.UseDB(db, opts...)
	_vocabulary.vocabularyDo.UseModel(&model.Vocabulary{})

	tableName := _vocabulary.vocabularyDo.TableName()
	_vocabulary.ALL = field.NewAsterisk(tableName)
	_vocabulary.Id = field.NewInt(tableName, "id")
	_vocabulary.Name = field.NewString(tableName, "name")
	_vocabulary.Tag = field.NewString(tableName, "tag")
	_vocabulary.Root = field.NewString(tableName, "root")
	_vocabulary.Status = field.NewString(tableName, "status")
	_vocabulary.Parts = field.NewString(tableName, "parts")
	_vocabulary.Intro = field.NewString(tableName, "intro")
	_vocabulary.Etymology = field.NewString(tableName, "etymology")
	_vocabulary.NoRoot = field.NewBool(tableName, "no_root")

	_vocabulary.fillFieldMap()

	return _vocabulary
}

type vocabulary struct {
	vocabularyDo

	ALL       field.Asterisk
	Id        field.Int
	Name      field.String
	Tag       field.String
	Root      field.String
	Status    field.String
	Parts     field.String
	Intro     field.String
	Etymology field.String
	NoRoot    field.Bool

	fieldMap map[string]field.Expr
}

func (v vocabulary) Table(newTableName string) *vocabulary {
	v.vocabularyDo.UseTable(newTableName)
	return v.updateTableName(newTableName)
}

func (v vocabulary) As(alias string) *vocabulary {
	v.vocabularyDo.DO = *(v.vocabularyDo.As(alias).(*gen.DO))
	return v.updateTableName(alias)
}

func (v *vocabulary) updateTableName(table string) *vocabulary {
	v.ALL = field.NewAsterisk(table)
	v.Id = field.NewInt(table, "id")
	v.Name = field.NewString(table, "name")
	v.Tag = field.NewString(table, "tag")
	v.Root = field.NewString(table, "root")
	v.Status = field.NewString(table, "status")
	v.Parts = field.NewString(table, "parts")
	v.Intro = field.NewString(table, "intro")
	v.Etymology = field.NewString(table, "etymology")
	v.NoRoot = field.NewBool(table, "no_root")

	v.fillFieldMap()

	return v
}

func (v *vocabulary) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := v.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (v *vocabulary) fillFieldMap() {
	v.fieldMap = make(map[string]field.Expr, 9)
	v.fieldMap["id"] = v.Id
	v.fieldMap["name"] = v.Name
	v.fieldMap["tag"] = v.Tag
	v.fieldMap["root"] = v.Root
	v.fieldMap["status"] = v.Status
	v.fieldMap["parts"] = v.Parts
	v.fieldMap["intro"] = v.Intro
	v.fieldMap["etymology"] = v.Etymology
	v.fieldMap["no_root"] = v.NoRoot
}

func (v vocabulary) clone(db *gorm.DB) vocabulary {
	v.vocabularyDo.ReplaceConnPool(db.Statement.ConnPool)
	return v
}

func (v vocabulary) replaceDB(db *gorm.DB) vocabulary {
	v.vocabularyDo.ReplaceDB(db)
	return v
}

type vocabularyDo struct{ gen.DO }

type IVocabularyDo interface {
	gen.SubQuery
	Debug() IVocabularyDo
	WithContext(ctx context.Context) IVocabularyDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IVocabularyDo
	WriteDB() IVocabularyDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IVocabularyDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IVocabularyDo
	Not(conds ...gen.Condition) IVocabularyDo
	Or(conds ...gen.Condition) IVocabularyDo
	Select(conds ...field.Expr) IVocabularyDo
	Where(conds ...gen.Condition) IVocabularyDo
	Order(conds ...field.Expr) IVocabularyDo
	Distinct(cols ...field.Expr) IVocabularyDo
	Omit(cols ...field.Expr) IVocabularyDo
	Join(table schema.Tabler, on ...field.Expr) IVocabularyDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IVocabularyDo
	RightJoin(table schema.Tabler, on ...field.Expr) IVocabularyDo
	Group(cols ...field.Expr) IVocabularyDo
	Having(conds ...gen.Condition) IVocabularyDo
	Limit(limit int) IVocabularyDo
	Offset(offset int) IVocabularyDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IVocabularyDo
	Unscoped() IVocabularyDo
	Create(values ...*model.Vocabulary) error
	CreateInBatches(values []*model.Vocabulary, batchSize int) error
	Save(values ...*model.Vocabulary) error
	First() (*model.Vocabulary, error)
	Take() (*model.Vocabulary, error)
	Last() (*model.Vocabulary, error)
	Find() ([]*model.Vocabulary, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Vocabulary, err error)
	FindInBatches(result *[]*model.Vocabulary, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Vocabulary) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IVocabularyDo
	Assign(attrs ...field.AssignExpr) IVocabularyDo
	Joins(fields ...field.RelationField) IVocabularyDo
	Preload(fields ...field.RelationField) IVocabularyDo
	FirstOrInit() (*model.Vocabulary, error)
	FirstOrCreate() (*model.Vocabulary, error)
	FindByPage(offset int, limit int) (result []*model.Vocabulary, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IVocabularyDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (v vocabularyDo) Debug() IVocabularyDo {
	return v.withDO(v.DO.Debug())
}

func (v vocabularyDo) WithContext(ctx context.Context) IVocabularyDo {
	return v.withDO(v.DO.WithContext(ctx))
}

func (v vocabularyDo) ReadDB() IVocabularyDo {
	return v.Clauses(dbresolver.Read)
}

func (v vocabularyDo) WriteDB() IVocabularyDo {
	return v.Clauses(dbresolver.Write)
}

func (v vocabularyDo) Session(config *gorm.Session) IVocabularyDo {
	return v.withDO(v.DO.Session(config))
}

func (v vocabularyDo) Clauses(conds ...clause.Expression) IVocabularyDo {
	return v.withDO(v.DO.Clauses(conds...))
}

func (v vocabularyDo) Returning(value interface{}, columns ...string) IVocabularyDo {
	return v.withDO(v.DO.Returning(value, columns...))
}

func (v vocabularyDo) Not(conds ...gen.Condition) IVocabularyDo {
	return v.withDO(v.DO.Not(conds...))
}

func (v vocabularyDo) Or(conds ...gen.Condition) IVocabularyDo {
	return v.withDO(v.DO.Or(conds...))
}

func (v vocabularyDo) Select(conds ...field.Expr) IVocabularyDo {
	return v.withDO(v.DO.Select(conds...))
}

func (v vocabularyDo) Where(conds ...gen.Condition) IVocabularyDo {
	return v.withDO(v.DO.Where(conds...))
}

func (v vocabularyDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IVocabularyDo {
	return v.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (v vocabularyDo) Order(conds ...field.Expr) IVocabularyDo {
	return v.withDO(v.DO.Order(conds...))
}

func (v vocabularyDo) Distinct(cols ...field.Expr) IVocabularyDo {
	return v.withDO(v.DO.Distinct(cols...))
}

func (v vocabularyDo) Omit(cols ...field.Expr) IVocabularyDo {
	return v.withDO(v.DO.Omit(cols...))
}

func (v vocabularyDo) Join(table schema.Tabler, on ...field.Expr) IVocabularyDo {
	return v.withDO(v.DO.Join(table, on...))
}

func (v vocabularyDo) LeftJoin(table schema.Tabler, on ...field.Expr) IVocabularyDo {
	return v.withDO(v.DO.LeftJoin(table, on...))
}

func (v vocabularyDo) RightJoin(table schema.Tabler, on ...field.Expr) IVocabularyDo {
	return v.withDO(v.DO.RightJoin(table, on...))
}

func (v vocabularyDo) Group(cols ...field.Expr) IVocabularyDo {
	return v.withDO(v.DO.Group(cols...))
}

func (v vocabularyDo) Having(conds ...gen.Condition) IVocabularyDo {
	return v.withDO(v.DO.Having(conds...))
}

func (v vocabularyDo) Limit(limit int) IVocabularyDo {
	return v.withDO(v.DO.Limit(limit))
}

func (v vocabularyDo) Offset(offset int) IVocabularyDo {
	return v.withDO(v.DO.Offset(offset))
}

func (v vocabularyDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IVocabularyDo {
	return v.withDO(v.DO.Scopes(funcs...))
}

func (v vocabularyDo) Unscoped() IVocabularyDo {
	return v.withDO(v.DO.Unscoped())
}

func (v vocabularyDo) Create(values ...*model.Vocabulary) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Create(values)
}

func (v vocabularyDo) CreateInBatches(values []*model.Vocabulary, batchSize int) error {
	return v.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (v vocabularyDo) Save(values ...*model.Vocabulary) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Save(values)
}

func (v vocabularyDo) First() (*model.Vocabulary, error) {
	if result, err := v.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Vocabulary), nil
	}
}

func (v vocabularyDo) Take() (*model.Vocabulary, error) {
	if result, err := v.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Vocabulary), nil
	}
}

func (v vocabularyDo) Last() (*model.Vocabulary, error) {
	if result, err := v.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Vocabulary), nil
	}
}

func (v vocabularyDo) Find() ([]*model.Vocabulary, error) {
	result, err := v.DO.Find()
	return result.([]*model.Vocabulary), err
}

func (v vocabularyDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Vocabulary, err error) {
	buf := make([]*model.Vocabulary, 0, batchSize)
	err = v.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (v vocabularyDo) FindInBatches(result *[]*model.Vocabulary, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return v.DO.FindInBatches(result, batchSize, fc)
}

func (v vocabularyDo) Attrs(attrs ...field.AssignExpr) IVocabularyDo {
	return v.withDO(v.DO.Attrs(attrs...))
}

func (v vocabularyDo) Assign(attrs ...field.AssignExpr) IVocabularyDo {
	return v.withDO(v.DO.Assign(attrs...))
}

func (v vocabularyDo) Joins(fields ...field.RelationField) IVocabularyDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Joins(_f))
	}
	return &v
}

func (v vocabularyDo) Preload(fields ...field.RelationField) IVocabularyDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Preload(_f))
	}
	return &v
}

func (v vocabularyDo) FirstOrInit() (*model.Vocabulary, error) {
	if result, err := v.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Vocabulary), nil
	}
}

func (v vocabularyDo) FirstOrCreate() (*model.Vocabulary, error) {
	if result, err := v.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Vocabulary), nil
	}
}

func (v vocabularyDo) FindByPage(offset int, limit int) (result []*model.Vocabulary, count int64, err error) {
	result, err = v.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = v.Offset(-1).Limit(-1).Count()
	return
}

func (v vocabularyDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = v.Count()
	if err != nil {
		return
	}

	err = v.Offset(offset).Limit(limit).Scan(result)
	return
}

func (v vocabularyDo) Scan(result interface{}) (err error) {
	return v.DO.Scan(result)
}

func (v vocabularyDo) Delete(models ...*model.Vocabulary) (result gen.ResultInfo, err error) {
	return v.DO.Delete(models)
}

func (v *vocabularyDo) withDO(do gen.Dao) *vocabularyDo {
	v.DO = *do.(*gen.DO)
	return v
}
