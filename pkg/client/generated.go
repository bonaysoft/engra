// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package client

import (
	"context"

	"github.com/Khan/genqlient/graphql"
	"github.com/bonaysoft/engra/apis/graph/model"
	context2 "github.com/bonaysoft/engra/pkg/client/context"
)

// FindResponse is returned by Find on success.
type FindResponse struct {
	Vocabulary model.Result `json:"vocabulary"`
}

// GetVocabulary returns FindResponse.Vocabulary, and is useful for accessing the field via an interface.
func (v *FindResponse) GetVocabulary() model.Result { return v.Vocabulary }

// __FindInput is used internally by genqlient
type __FindInput struct {
	Word string `json:"word"`
}

// GetWord returns __FindInput.Word, and is useful for accessing the field via an interface.
func (v *__FindInput) GetWord() string { return v.Word }

// The query or mutation executed by Find.
const Find_Operation = `
query Find ($word: String!) {
	vocabulary(name: $word) {
		self {
			... vocabularyWithChildren
		}
		root {
			... vocabularyWithChildren
		}
	}
}
fragment vocabularyWithChildren on Vocabulary {
	... vocabulary
	children {
		... vocabulary
		children {
			... vocabulary
			children {
				... vocabulary
				children {
					... vocabulary
				}
			}
		}
	}
}
fragment vocabulary on Vocabulary {
	name
	phonetic
	mnemonic
	meaning
	tags
	constitute
}
`

func Find(
	ctx context.Context,
	word string,
) (*FindResponse, error) {
	req := &graphql.Request{
		OpName: "Find",
		Query:  Find_Operation,
		Variables: &__FindInput{
			Word: word,
		},
	}
	var err error
	var client graphql.Client

	client, err = context2.GetClient(ctx)
	if err != nil {
		return nil, err
	}

	var data FindResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
