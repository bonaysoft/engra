// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package client

import (
	"context"
	"encoding/json"

	"github.com/Khan/genqlient/graphql"
	context2 "github.com/bonaysoft/engra/client/context"
)

// FindResponse is returned by Find on success.
type FindResponse struct {
	Vocabulary FindVocabularyResult `json:"vocabulary"`
}

// GetVocabulary returns FindResponse.Vocabulary, and is useful for accessing the field via an interface.
func (v *FindResponse) GetVocabulary() FindVocabularyResult { return v.Vocabulary }

// FindVocabularyResult includes the requested fields of the GraphQL type Result.
type FindVocabularyResult struct {
	Self FindVocabularyResultSelfVocabulary `json:"self"`
	Root FindVocabularyResultRootVocabulary `json:"root"`
}

// GetSelf returns FindVocabularyResult.Self, and is useful for accessing the field via an interface.
func (v *FindVocabularyResult) GetSelf() FindVocabularyResultSelfVocabulary { return v.Self }

// GetRoot returns FindVocabularyResult.Root, and is useful for accessing the field via an interface.
func (v *FindVocabularyResult) GetRoot() FindVocabularyResultRootVocabulary { return v.Root }

// FindVocabularyResultRootVocabulary includes the requested fields of the GraphQL type Vocabulary.
type FindVocabularyResultRootVocabulary struct {
	vocabularyWithChildren `json:"-"`
}

// GetChildren returns FindVocabularyResultRootVocabulary.Children, and is useful for accessing the field via an interface.
func (v *FindVocabularyResultRootVocabulary) GetChildren() []vocabularyWithChildrenChildrenVocabulary {
	return v.vocabularyWithChildren.Children
}

// GetName returns FindVocabularyResultRootVocabulary.Name, and is useful for accessing the field via an interface.
func (v *FindVocabularyResultRootVocabulary) GetName() string {
	return v.vocabularyWithChildren.vocabulary.Name
}

// GetPhonetic returns FindVocabularyResultRootVocabulary.Phonetic, and is useful for accessing the field via an interface.
func (v *FindVocabularyResultRootVocabulary) GetPhonetic() string {
	return v.vocabularyWithChildren.vocabulary.Phonetic
}

// GetMnemonic returns FindVocabularyResultRootVocabulary.Mnemonic, and is useful for accessing the field via an interface.
func (v *FindVocabularyResultRootVocabulary) GetMnemonic() string {
	return v.vocabularyWithChildren.vocabulary.Mnemonic
}

// GetMeaning returns FindVocabularyResultRootVocabulary.Meaning, and is useful for accessing the field via an interface.
func (v *FindVocabularyResultRootVocabulary) GetMeaning() string {
	return v.vocabularyWithChildren.vocabulary.Meaning
}

// GetTags returns FindVocabularyResultRootVocabulary.Tags, and is useful for accessing the field via an interface.
func (v *FindVocabularyResultRootVocabulary) GetTags() []string {
	return v.vocabularyWithChildren.vocabulary.Tags
}

// GetConstitute returns FindVocabularyResultRootVocabulary.Constitute, and is useful for accessing the field via an interface.
func (v *FindVocabularyResultRootVocabulary) GetConstitute() []string {
	return v.vocabularyWithChildren.vocabulary.Constitute
}

func (v *FindVocabularyResultRootVocabulary) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*FindVocabularyResultRootVocabulary
		graphql.NoUnmarshalJSON
	}
	firstPass.FindVocabularyResultRootVocabulary = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.vocabularyWithChildren)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalFindVocabularyResultRootVocabulary struct {
	Children []vocabularyWithChildrenChildrenVocabulary `json:"children"`

	Name string `json:"name"`

	Phonetic string `json:"phonetic"`

	Mnemonic string `json:"mnemonic"`

	Meaning string `json:"meaning"`

	Tags []string `json:"tags"`

	Constitute []string `json:"constitute"`
}

func (v *FindVocabularyResultRootVocabulary) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *FindVocabularyResultRootVocabulary) __premarshalJSON() (*__premarshalFindVocabularyResultRootVocabulary, error) {
	var retval __premarshalFindVocabularyResultRootVocabulary

	retval.Children = v.vocabularyWithChildren.Children
	retval.Name = v.vocabularyWithChildren.vocabulary.Name
	retval.Phonetic = v.vocabularyWithChildren.vocabulary.Phonetic
	retval.Mnemonic = v.vocabularyWithChildren.vocabulary.Mnemonic
	retval.Meaning = v.vocabularyWithChildren.vocabulary.Meaning
	retval.Tags = v.vocabularyWithChildren.vocabulary.Tags
	retval.Constitute = v.vocabularyWithChildren.vocabulary.Constitute
	return &retval, nil
}

// FindVocabularyResultSelfVocabulary includes the requested fields of the GraphQL type Vocabulary.
type FindVocabularyResultSelfVocabulary struct {
	vocabularyWithChildren `json:"-"`
}

// GetChildren returns FindVocabularyResultSelfVocabulary.Children, and is useful for accessing the field via an interface.
func (v *FindVocabularyResultSelfVocabulary) GetChildren() []vocabularyWithChildrenChildrenVocabulary {
	return v.vocabularyWithChildren.Children
}

// GetName returns FindVocabularyResultSelfVocabulary.Name, and is useful for accessing the field via an interface.
func (v *FindVocabularyResultSelfVocabulary) GetName() string {
	return v.vocabularyWithChildren.vocabulary.Name
}

// GetPhonetic returns FindVocabularyResultSelfVocabulary.Phonetic, and is useful for accessing the field via an interface.
func (v *FindVocabularyResultSelfVocabulary) GetPhonetic() string {
	return v.vocabularyWithChildren.vocabulary.Phonetic
}

// GetMnemonic returns FindVocabularyResultSelfVocabulary.Mnemonic, and is useful for accessing the field via an interface.
func (v *FindVocabularyResultSelfVocabulary) GetMnemonic() string {
	return v.vocabularyWithChildren.vocabulary.Mnemonic
}

// GetMeaning returns FindVocabularyResultSelfVocabulary.Meaning, and is useful for accessing the field via an interface.
func (v *FindVocabularyResultSelfVocabulary) GetMeaning() string {
	return v.vocabularyWithChildren.vocabulary.Meaning
}

// GetTags returns FindVocabularyResultSelfVocabulary.Tags, and is useful for accessing the field via an interface.
func (v *FindVocabularyResultSelfVocabulary) GetTags() []string {
	return v.vocabularyWithChildren.vocabulary.Tags
}

// GetConstitute returns FindVocabularyResultSelfVocabulary.Constitute, and is useful for accessing the field via an interface.
func (v *FindVocabularyResultSelfVocabulary) GetConstitute() []string {
	return v.vocabularyWithChildren.vocabulary.Constitute
}

func (v *FindVocabularyResultSelfVocabulary) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*FindVocabularyResultSelfVocabulary
		graphql.NoUnmarshalJSON
	}
	firstPass.FindVocabularyResultSelfVocabulary = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.vocabularyWithChildren)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalFindVocabularyResultSelfVocabulary struct {
	Children []vocabularyWithChildrenChildrenVocabulary `json:"children"`

	Name string `json:"name"`

	Phonetic string `json:"phonetic"`

	Mnemonic string `json:"mnemonic"`

	Meaning string `json:"meaning"`

	Tags []string `json:"tags"`

	Constitute []string `json:"constitute"`
}

func (v *FindVocabularyResultSelfVocabulary) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *FindVocabularyResultSelfVocabulary) __premarshalJSON() (*__premarshalFindVocabularyResultSelfVocabulary, error) {
	var retval __premarshalFindVocabularyResultSelfVocabulary

	retval.Children = v.vocabularyWithChildren.Children
	retval.Name = v.vocabularyWithChildren.vocabulary.Name
	retval.Phonetic = v.vocabularyWithChildren.vocabulary.Phonetic
	retval.Mnemonic = v.vocabularyWithChildren.vocabulary.Mnemonic
	retval.Meaning = v.vocabularyWithChildren.vocabulary.Meaning
	retval.Tags = v.vocabularyWithChildren.vocabulary.Tags
	retval.Constitute = v.vocabularyWithChildren.vocabulary.Constitute
	return &retval, nil
}

// __FindInput is used internally by genqlient
type __FindInput struct {
	Word string `json:"word"`
}

// GetWord returns __FindInput.Word, and is useful for accessing the field via an interface.
func (v *__FindInput) GetWord() string { return v.Word }

// vocabulary includes the GraphQL fields of Vocabulary requested by the fragment vocabulary.
type vocabulary struct {
	Name       string   `json:"name"`
	Phonetic   string   `json:"phonetic"`
	Mnemonic   string   `json:"mnemonic"`
	Meaning    string   `json:"meaning"`
	Tags       []string `json:"tags"`
	Constitute []string `json:"constitute"`
}

// GetName returns vocabulary.Name, and is useful for accessing the field via an interface.
func (v *vocabulary) GetName() string { return v.Name }

// GetPhonetic returns vocabulary.Phonetic, and is useful for accessing the field via an interface.
func (v *vocabulary) GetPhonetic() string { return v.Phonetic }

// GetMnemonic returns vocabulary.Mnemonic, and is useful for accessing the field via an interface.
func (v *vocabulary) GetMnemonic() string { return v.Mnemonic }

// GetMeaning returns vocabulary.Meaning, and is useful for accessing the field via an interface.
func (v *vocabulary) GetMeaning() string { return v.Meaning }

// GetTags returns vocabulary.Tags, and is useful for accessing the field via an interface.
func (v *vocabulary) GetTags() []string { return v.Tags }

// GetConstitute returns vocabulary.Constitute, and is useful for accessing the field via an interface.
func (v *vocabulary) GetConstitute() []string { return v.Constitute }

// vocabularyWithChildren includes the GraphQL fields of Vocabulary requested by the fragment vocabularyWithChildren.
type vocabularyWithChildren struct {
	vocabulary `json:"-"`
	Children   []vocabularyWithChildrenChildrenVocabulary `json:"children"`
}

// GetChildren returns vocabularyWithChildren.Children, and is useful for accessing the field via an interface.
func (v *vocabularyWithChildren) GetChildren() []vocabularyWithChildrenChildrenVocabulary {
	return v.Children
}

// GetName returns vocabularyWithChildren.Name, and is useful for accessing the field via an interface.
func (v *vocabularyWithChildren) GetName() string { return v.vocabulary.Name }

// GetPhonetic returns vocabularyWithChildren.Phonetic, and is useful for accessing the field via an interface.
func (v *vocabularyWithChildren) GetPhonetic() string { return v.vocabulary.Phonetic }

// GetMnemonic returns vocabularyWithChildren.Mnemonic, and is useful for accessing the field via an interface.
func (v *vocabularyWithChildren) GetMnemonic() string { return v.vocabulary.Mnemonic }

// GetMeaning returns vocabularyWithChildren.Meaning, and is useful for accessing the field via an interface.
func (v *vocabularyWithChildren) GetMeaning() string { return v.vocabulary.Meaning }

// GetTags returns vocabularyWithChildren.Tags, and is useful for accessing the field via an interface.
func (v *vocabularyWithChildren) GetTags() []string { return v.vocabulary.Tags }

// GetConstitute returns vocabularyWithChildren.Constitute, and is useful for accessing the field via an interface.
func (v *vocabularyWithChildren) GetConstitute() []string { return v.vocabulary.Constitute }

func (v *vocabularyWithChildren) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*vocabularyWithChildren
		graphql.NoUnmarshalJSON
	}
	firstPass.vocabularyWithChildren = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.vocabulary)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalvocabularyWithChildren struct {
	Children []vocabularyWithChildrenChildrenVocabulary `json:"children"`

	Name string `json:"name"`

	Phonetic string `json:"phonetic"`

	Mnemonic string `json:"mnemonic"`

	Meaning string `json:"meaning"`

	Tags []string `json:"tags"`

	Constitute []string `json:"constitute"`
}

func (v *vocabularyWithChildren) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *vocabularyWithChildren) __premarshalJSON() (*__premarshalvocabularyWithChildren, error) {
	var retval __premarshalvocabularyWithChildren

	retval.Children = v.Children
	retval.Name = v.vocabulary.Name
	retval.Phonetic = v.vocabulary.Phonetic
	retval.Mnemonic = v.vocabulary.Mnemonic
	retval.Meaning = v.vocabulary.Meaning
	retval.Tags = v.vocabulary.Tags
	retval.Constitute = v.vocabulary.Constitute
	return &retval, nil
}

// vocabularyWithChildrenChildrenVocabulary includes the requested fields of the GraphQL type Vocabulary.
type vocabularyWithChildrenChildrenVocabulary struct {
	vocabulary `json:"-"`
	Children   []vocabularyWithChildrenChildrenVocabularyChildrenVocabulary `json:"children"`
}

// GetChildren returns vocabularyWithChildrenChildrenVocabulary.Children, and is useful for accessing the field via an interface.
func (v *vocabularyWithChildrenChildrenVocabulary) GetChildren() []vocabularyWithChildrenChildrenVocabularyChildrenVocabulary {
	return v.Children
}

// GetName returns vocabularyWithChildrenChildrenVocabulary.Name, and is useful for accessing the field via an interface.
func (v *vocabularyWithChildrenChildrenVocabulary) GetName() string { return v.vocabulary.Name }

// GetPhonetic returns vocabularyWithChildrenChildrenVocabulary.Phonetic, and is useful for accessing the field via an interface.
func (v *vocabularyWithChildrenChildrenVocabulary) GetPhonetic() string { return v.vocabulary.Phonetic }

// GetMnemonic returns vocabularyWithChildrenChildrenVocabulary.Mnemonic, and is useful for accessing the field via an interface.
func (v *vocabularyWithChildrenChildrenVocabulary) GetMnemonic() string { return v.vocabulary.Mnemonic }

// GetMeaning returns vocabularyWithChildrenChildrenVocabulary.Meaning, and is useful for accessing the field via an interface.
func (v *vocabularyWithChildrenChildrenVocabulary) GetMeaning() string { return v.vocabulary.Meaning }

// GetTags returns vocabularyWithChildrenChildrenVocabulary.Tags, and is useful for accessing the field via an interface.
func (v *vocabularyWithChildrenChildrenVocabulary) GetTags() []string { return v.vocabulary.Tags }

// GetConstitute returns vocabularyWithChildrenChildrenVocabulary.Constitute, and is useful for accessing the field via an interface.
func (v *vocabularyWithChildrenChildrenVocabulary) GetConstitute() []string {
	return v.vocabulary.Constitute
}

func (v *vocabularyWithChildrenChildrenVocabulary) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*vocabularyWithChildrenChildrenVocabulary
		graphql.NoUnmarshalJSON
	}
	firstPass.vocabularyWithChildrenChildrenVocabulary = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.vocabulary)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalvocabularyWithChildrenChildrenVocabulary struct {
	Children []vocabularyWithChildrenChildrenVocabularyChildrenVocabulary `json:"children"`

	Name string `json:"name"`

	Phonetic string `json:"phonetic"`

	Mnemonic string `json:"mnemonic"`

	Meaning string `json:"meaning"`

	Tags []string `json:"tags"`

	Constitute []string `json:"constitute"`
}

func (v *vocabularyWithChildrenChildrenVocabulary) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *vocabularyWithChildrenChildrenVocabulary) __premarshalJSON() (*__premarshalvocabularyWithChildrenChildrenVocabulary, error) {
	var retval __premarshalvocabularyWithChildrenChildrenVocabulary

	retval.Children = v.Children
	retval.Name = v.vocabulary.Name
	retval.Phonetic = v.vocabulary.Phonetic
	retval.Mnemonic = v.vocabulary.Mnemonic
	retval.Meaning = v.vocabulary.Meaning
	retval.Tags = v.vocabulary.Tags
	retval.Constitute = v.vocabulary.Constitute
	return &retval, nil
}

// vocabularyWithChildrenChildrenVocabularyChildrenVocabulary includes the requested fields of the GraphQL type Vocabulary.
type vocabularyWithChildrenChildrenVocabularyChildrenVocabulary struct {
	vocabulary `json:"-"`
	Children   []vocabularyWithChildrenChildrenVocabularyChildrenVocabularyChildrenVocabulary `json:"children"`
}

// GetChildren returns vocabularyWithChildrenChildrenVocabularyChildrenVocabulary.Children, and is useful for accessing the field via an interface.
func (v *vocabularyWithChildrenChildrenVocabularyChildrenVocabulary) GetChildren() []vocabularyWithChildrenChildrenVocabularyChildrenVocabularyChildrenVocabulary {
	return v.Children
}

// GetName returns vocabularyWithChildrenChildrenVocabularyChildrenVocabulary.Name, and is useful for accessing the field via an interface.
func (v *vocabularyWithChildrenChildrenVocabularyChildrenVocabulary) GetName() string {
	return v.vocabulary.Name
}

// GetPhonetic returns vocabularyWithChildrenChildrenVocabularyChildrenVocabulary.Phonetic, and is useful for accessing the field via an interface.
func (v *vocabularyWithChildrenChildrenVocabularyChildrenVocabulary) GetPhonetic() string {
	return v.vocabulary.Phonetic
}

// GetMnemonic returns vocabularyWithChildrenChildrenVocabularyChildrenVocabulary.Mnemonic, and is useful for accessing the field via an interface.
func (v *vocabularyWithChildrenChildrenVocabularyChildrenVocabulary) GetMnemonic() string {
	return v.vocabulary.Mnemonic
}

// GetMeaning returns vocabularyWithChildrenChildrenVocabularyChildrenVocabulary.Meaning, and is useful for accessing the field via an interface.
func (v *vocabularyWithChildrenChildrenVocabularyChildrenVocabulary) GetMeaning() string {
	return v.vocabulary.Meaning
}

// GetTags returns vocabularyWithChildrenChildrenVocabularyChildrenVocabulary.Tags, and is useful for accessing the field via an interface.
func (v *vocabularyWithChildrenChildrenVocabularyChildrenVocabulary) GetTags() []string {
	return v.vocabulary.Tags
}

// GetConstitute returns vocabularyWithChildrenChildrenVocabularyChildrenVocabulary.Constitute, and is useful for accessing the field via an interface.
func (v *vocabularyWithChildrenChildrenVocabularyChildrenVocabulary) GetConstitute() []string {
	return v.vocabulary.Constitute
}

func (v *vocabularyWithChildrenChildrenVocabularyChildrenVocabulary) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*vocabularyWithChildrenChildrenVocabularyChildrenVocabulary
		graphql.NoUnmarshalJSON
	}
	firstPass.vocabularyWithChildrenChildrenVocabularyChildrenVocabulary = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.vocabulary)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalvocabularyWithChildrenChildrenVocabularyChildrenVocabulary struct {
	Children []vocabularyWithChildrenChildrenVocabularyChildrenVocabularyChildrenVocabulary `json:"children"`

	Name string `json:"name"`

	Phonetic string `json:"phonetic"`

	Mnemonic string `json:"mnemonic"`

	Meaning string `json:"meaning"`

	Tags []string `json:"tags"`

	Constitute []string `json:"constitute"`
}

func (v *vocabularyWithChildrenChildrenVocabularyChildrenVocabulary) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *vocabularyWithChildrenChildrenVocabularyChildrenVocabulary) __premarshalJSON() (*__premarshalvocabularyWithChildrenChildrenVocabularyChildrenVocabulary, error) {
	var retval __premarshalvocabularyWithChildrenChildrenVocabularyChildrenVocabulary

	retval.Children = v.Children
	retval.Name = v.vocabulary.Name
	retval.Phonetic = v.vocabulary.Phonetic
	retval.Mnemonic = v.vocabulary.Mnemonic
	retval.Meaning = v.vocabulary.Meaning
	retval.Tags = v.vocabulary.Tags
	retval.Constitute = v.vocabulary.Constitute
	return &retval, nil
}

// vocabularyWithChildrenChildrenVocabularyChildrenVocabularyChildrenVocabulary includes the requested fields of the GraphQL type Vocabulary.
type vocabularyWithChildrenChildrenVocabularyChildrenVocabularyChildrenVocabulary struct {
	vocabulary `json:"-"`
	Children   []vocabularyWithChildrenChildrenVocabularyChildrenVocabularyChildrenVocabularyChildrenVocabulary `json:"children"`
}

// GetChildren returns vocabularyWithChildrenChildrenVocabularyChildrenVocabularyChildrenVocabulary.Children, and is useful for accessing the field via an interface.
func (v *vocabularyWithChildrenChildrenVocabularyChildrenVocabularyChildrenVocabulary) GetChildren() []vocabularyWithChildrenChildrenVocabularyChildrenVocabularyChildrenVocabularyChildrenVocabulary {
	return v.Children
}

// GetName returns vocabularyWithChildrenChildrenVocabularyChildrenVocabularyChildrenVocabulary.Name, and is useful for accessing the field via an interface.
func (v *vocabularyWithChildrenChildrenVocabularyChildrenVocabularyChildrenVocabulary) GetName() string {
	return v.vocabulary.Name
}

// GetPhonetic returns vocabularyWithChildrenChildrenVocabularyChildrenVocabularyChildrenVocabulary.Phonetic, and is useful for accessing the field via an interface.
func (v *vocabularyWithChildrenChildrenVocabularyChildrenVocabularyChildrenVocabulary) GetPhonetic() string {
	return v.vocabulary.Phonetic
}

// GetMnemonic returns vocabularyWithChildrenChildrenVocabularyChildrenVocabularyChildrenVocabulary.Mnemonic, and is useful for accessing the field via an interface.
func (v *vocabularyWithChildrenChildrenVocabularyChildrenVocabularyChildrenVocabulary) GetMnemonic() string {
	return v.vocabulary.Mnemonic
}

// GetMeaning returns vocabularyWithChildrenChildrenVocabularyChildrenVocabularyChildrenVocabulary.Meaning, and is useful for accessing the field via an interface.
func (v *vocabularyWithChildrenChildrenVocabularyChildrenVocabularyChildrenVocabulary) GetMeaning() string {
	return v.vocabulary.Meaning
}

// GetTags returns vocabularyWithChildrenChildrenVocabularyChildrenVocabularyChildrenVocabulary.Tags, and is useful for accessing the field via an interface.
func (v *vocabularyWithChildrenChildrenVocabularyChildrenVocabularyChildrenVocabulary) GetTags() []string {
	return v.vocabulary.Tags
}

// GetConstitute returns vocabularyWithChildrenChildrenVocabularyChildrenVocabularyChildrenVocabulary.Constitute, and is useful for accessing the field via an interface.
func (v *vocabularyWithChildrenChildrenVocabularyChildrenVocabularyChildrenVocabulary) GetConstitute() []string {
	return v.vocabulary.Constitute
}

func (v *vocabularyWithChildrenChildrenVocabularyChildrenVocabularyChildrenVocabulary) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*vocabularyWithChildrenChildrenVocabularyChildrenVocabularyChildrenVocabulary
		graphql.NoUnmarshalJSON
	}
	firstPass.vocabularyWithChildrenChildrenVocabularyChildrenVocabularyChildrenVocabulary = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.vocabulary)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalvocabularyWithChildrenChildrenVocabularyChildrenVocabularyChildrenVocabulary struct {
	Children []vocabularyWithChildrenChildrenVocabularyChildrenVocabularyChildrenVocabularyChildrenVocabulary `json:"children"`

	Name string `json:"name"`

	Phonetic string `json:"phonetic"`

	Mnemonic string `json:"mnemonic"`

	Meaning string `json:"meaning"`

	Tags []string `json:"tags"`

	Constitute []string `json:"constitute"`
}

func (v *vocabularyWithChildrenChildrenVocabularyChildrenVocabularyChildrenVocabulary) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *vocabularyWithChildrenChildrenVocabularyChildrenVocabularyChildrenVocabulary) __premarshalJSON() (*__premarshalvocabularyWithChildrenChildrenVocabularyChildrenVocabularyChildrenVocabulary, error) {
	var retval __premarshalvocabularyWithChildrenChildrenVocabularyChildrenVocabularyChildrenVocabulary

	retval.Children = v.Children
	retval.Name = v.vocabulary.Name
	retval.Phonetic = v.vocabulary.Phonetic
	retval.Mnemonic = v.vocabulary.Mnemonic
	retval.Meaning = v.vocabulary.Meaning
	retval.Tags = v.vocabulary.Tags
	retval.Constitute = v.vocabulary.Constitute
	return &retval, nil
}

// vocabularyWithChildrenChildrenVocabularyChildrenVocabularyChildrenVocabularyChildrenVocabulary includes the requested fields of the GraphQL type Vocabulary.
type vocabularyWithChildrenChildrenVocabularyChildrenVocabularyChildrenVocabularyChildrenVocabulary struct {
	vocabulary `json:"-"`
}

// GetName returns vocabularyWithChildrenChildrenVocabularyChildrenVocabularyChildrenVocabularyChildrenVocabulary.Name, and is useful for accessing the field via an interface.
func (v *vocabularyWithChildrenChildrenVocabularyChildrenVocabularyChildrenVocabularyChildrenVocabulary) GetName() string {
	return v.vocabulary.Name
}

// GetPhonetic returns vocabularyWithChildrenChildrenVocabularyChildrenVocabularyChildrenVocabularyChildrenVocabulary.Phonetic, and is useful for accessing the field via an interface.
func (v *vocabularyWithChildrenChildrenVocabularyChildrenVocabularyChildrenVocabularyChildrenVocabulary) GetPhonetic() string {
	return v.vocabulary.Phonetic
}

// GetMnemonic returns vocabularyWithChildrenChildrenVocabularyChildrenVocabularyChildrenVocabularyChildrenVocabulary.Mnemonic, and is useful for accessing the field via an interface.
func (v *vocabularyWithChildrenChildrenVocabularyChildrenVocabularyChildrenVocabularyChildrenVocabulary) GetMnemonic() string {
	return v.vocabulary.Mnemonic
}

// GetMeaning returns vocabularyWithChildrenChildrenVocabularyChildrenVocabularyChildrenVocabularyChildrenVocabulary.Meaning, and is useful for accessing the field via an interface.
func (v *vocabularyWithChildrenChildrenVocabularyChildrenVocabularyChildrenVocabularyChildrenVocabulary) GetMeaning() string {
	return v.vocabulary.Meaning
}

// GetTags returns vocabularyWithChildrenChildrenVocabularyChildrenVocabularyChildrenVocabularyChildrenVocabulary.Tags, and is useful for accessing the field via an interface.
func (v *vocabularyWithChildrenChildrenVocabularyChildrenVocabularyChildrenVocabularyChildrenVocabulary) GetTags() []string {
	return v.vocabulary.Tags
}

// GetConstitute returns vocabularyWithChildrenChildrenVocabularyChildrenVocabularyChildrenVocabularyChildrenVocabulary.Constitute, and is useful for accessing the field via an interface.
func (v *vocabularyWithChildrenChildrenVocabularyChildrenVocabularyChildrenVocabularyChildrenVocabulary) GetConstitute() []string {
	return v.vocabulary.Constitute
}

func (v *vocabularyWithChildrenChildrenVocabularyChildrenVocabularyChildrenVocabularyChildrenVocabulary) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*vocabularyWithChildrenChildrenVocabularyChildrenVocabularyChildrenVocabularyChildrenVocabulary
		graphql.NoUnmarshalJSON
	}
	firstPass.vocabularyWithChildrenChildrenVocabularyChildrenVocabularyChildrenVocabularyChildrenVocabulary = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.vocabulary)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalvocabularyWithChildrenChildrenVocabularyChildrenVocabularyChildrenVocabularyChildrenVocabulary struct {
	Name string `json:"name"`

	Phonetic string `json:"phonetic"`

	Mnemonic string `json:"mnemonic"`

	Meaning string `json:"meaning"`

	Tags []string `json:"tags"`

	Constitute []string `json:"constitute"`
}

func (v *vocabularyWithChildrenChildrenVocabularyChildrenVocabularyChildrenVocabularyChildrenVocabulary) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *vocabularyWithChildrenChildrenVocabularyChildrenVocabularyChildrenVocabularyChildrenVocabulary) __premarshalJSON() (*__premarshalvocabularyWithChildrenChildrenVocabularyChildrenVocabularyChildrenVocabularyChildrenVocabulary, error) {
	var retval __premarshalvocabularyWithChildrenChildrenVocabularyChildrenVocabularyChildrenVocabularyChildrenVocabulary

	retval.Name = v.vocabulary.Name
	retval.Phonetic = v.vocabulary.Phonetic
	retval.Mnemonic = v.vocabulary.Mnemonic
	retval.Meaning = v.vocabulary.Meaning
	retval.Tags = v.vocabulary.Tags
	retval.Constitute = v.vocabulary.Constitute
	return &retval, nil
}

func Find(
	ctx context.Context,
	word string,
) (*FindResponse, error) {
	req := &graphql.Request{
		OpName: "Find",
		Query: `
query Find ($word: String!) {
	vocabulary(name: $word) {
		self {
			... vocabularyWithChildren
		}
		root {
			... vocabularyWithChildren
		}
	}
}
fragment vocabularyWithChildren on Vocabulary {
	... vocabulary
	children {
		... vocabulary
		children {
			... vocabulary
			children {
				... vocabulary
				children {
					... vocabulary
				}
			}
		}
	}
}
fragment vocabulary on Vocabulary {
	name
	phonetic
	mnemonic
	meaning
	tags
	constitute
}
`,
		Variables: &__FindInput{
			Word: word,
		},
	}
	var err error
	var client graphql.Client

	client, err = context2.GetClient(ctx)
	if err != nil {
		return nil, err
	}

	var data FindResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
