// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package client

import (
	"context"

	"github.com/Khan/genqlient/graphql"
	context2 "github.com/bonaysoft/engra/apis/client/context"
	"github.com/bonaysoft/engra/apis/graph/model"
)

// LookupResponse is returned by Lookup on success.
type LookupResponse struct {
	Vocabularies []model.Vocabulary `json:"vocabularies"`
}

// GetVocabularies returns LookupResponse.Vocabularies, and is useful for accessing the field via an interface.
func (v *LookupResponse) GetVocabularies() []model.Vocabulary { return v.Vocabularies }

// LookupRootResponse is returned by LookupRoot on success.
type LookupRootResponse struct {
	VocabularyRootTree model.Vocabulary `json:"vocabularyRootTree"`
}

// GetVocabularyRootTree returns LookupRootResponse.VocabularyRootTree, and is useful for accessing the field via an interface.
func (v *LookupRootResponse) GetVocabularyRootTree() model.Vocabulary { return v.VocabularyRootTree }

// __LookupInput is used internally by genqlient
type __LookupInput struct {
	Words []string `json:"words"`
}

// GetWords returns __LookupInput.Words, and is useful for accessing the field via an interface.
func (v *__LookupInput) GetWords() []string { return v.Words }

// __LookupRootInput is used internally by genqlient
type __LookupRootInput struct {
	Word string `json:"word"`
}

// GetWord returns __LookupRootInput.Word, and is useful for accessing the field via an interface.
func (v *__LookupRootInput) GetWord() string { return v.Word }

// The query or mutation executed by Lookup.
const Lookup_Operation = `
query Lookup ($words: [String!]) {
	vocabularies(names: $words) {
		... vocabulary
	}
}
fragment vocabulary on Vocabulary {
	name
	phonetic
	mnemonic
	meaning
	tags
	roots
	constitute
}
`

func Lookup(
	ctx context.Context,
	words []string,
) (*LookupResponse, error) {
	req := &graphql.Request{
		OpName: "Lookup",
		Query:  Lookup_Operation,
		Variables: &__LookupInput{
			Words: words,
		},
	}
	var err error
	var client graphql.Client

	client, err = context2.GetClient(ctx)
	if err != nil {
		return nil, err
	}

	var data LookupResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by LookupRoot.
const LookupRoot_Operation = `
query LookupRoot ($word: String!) {
	vocabularyRootTree(name: $word) {
		... vocabularyWithChildren
	}
}
fragment vocabularyWithChildren on Vocabulary {
	... vocabulary
	children {
		... vocabulary
		children {
			... vocabulary
			children {
				... vocabulary
				children {
					... vocabulary
				}
			}
		}
	}
}
fragment vocabulary on Vocabulary {
	name
	phonetic
	mnemonic
	meaning
	tags
	roots
	constitute
}
`

func LookupRoot(
	ctx context.Context,
	word string,
) (*LookupRootResponse, error) {
	req := &graphql.Request{
		OpName: "LookupRoot",
		Query:  LookupRoot_Operation,
		Variables: &__LookupRootInput{
			Word: word,
		},
	}
	var err error
	var client graphql.Client

	client, err = context2.GetClient(ctx)
	if err != nil {
		return nil, err
	}

	var data LookupRootResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
